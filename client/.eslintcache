[{"/app/src/index.tsx":"1","/app/src/reportWebVitals.ts":"2","/app/src/App.tsx":"3","/app/src/store/configureStore.ts":"4","/app/src/store/thunks/user.ts":"5","/app/src/store/reducers/index.ts":"6","/app/src/components/protectedRoute.tsx":"7","/app/src/components/index.ts":"8","/app/src/store/actions/user.ts":"9","/app/src/store/reducers/user.ts":"10","/app/src/helpers/api/user.ts":"11","/app/src/components/NavBar.tsx":"12","/app/src/components/Profile.tsx":"13","/app/src/components/Home.tsx":"14","/app/src/components/auth/Logout.tsx":"15","/app/src/components/auth/ConfirmPage.tsx":"16","/app/src/components/auth/Login.tsx":"17","/app/src/components/auth/Register.tsx":"18","/app/src/components/auth/LoginResetPassword.tsx":"19","/app/src/components/auth/LoginForgot.tsx":"20","/app/src/helpers/api/index.ts":"21","/app/src/store/thunks/auth.ts":"22","/app/src/components/Error.tsx":"23"},{"size":897,"mtime":1609724162910,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":1609665450678,"results":"26","hashOfConfig":"25"},{"size":1420,"mtime":1609724441040,"results":"27","hashOfConfig":"25"},{"size":835,"mtime":1609666641016,"results":"28","hashOfConfig":"25"},{"size":399,"mtime":1609669681539,"results":"29","hashOfConfig":"25"},{"size":346,"mtime":1609722164685,"results":"30","hashOfConfig":"25"},{"size":565,"mtime":1609722874618,"results":"31","hashOfConfig":"25"},{"size":572,"mtime":1609724878927,"results":"32","hashOfConfig":"25"},{"size":575,"mtime":1609666899236,"results":"33","hashOfConfig":"25"},{"size":769,"mtime":1609676819091,"results":"34","hashOfConfig":"25"},{"size":1001,"mtime":1609669560614,"results":"35","hashOfConfig":"25"},{"size":1134,"mtime":1609675659443,"results":"36","hashOfConfig":"25"},{"size":602,"mtime":1609675887686,"results":"37","hashOfConfig":"25"},{"size":228,"mtime":1610346484970,"results":"38","hashOfConfig":"25"},{"size":505,"mtime":1609724878323,"results":"39","hashOfConfig":"25"},{"size":1164,"mtime":1609724813896,"results":"40","hashOfConfig":"25"},{"size":2509,"mtime":1609724834725,"results":"41","hashOfConfig":"25"},{"size":4931,"mtime":1609724877678,"results":"42","hashOfConfig":"25"},{"size":2146,"mtime":1609724855898,"results":"43","hashOfConfig":"25"},{"size":2440,"mtime":1609724847965,"results":"44","hashOfConfig":"25"},{"size":159,"mtime":1610340035470,"results":"45","hashOfConfig":"25"},{"size":2067,"mtime":1610339377384,"results":"46","hashOfConfig":"25"},{"size":239,"mtime":1610346590279,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1t2ggap",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/app/src/index.tsx",[],["104","105"],"/app/src/reportWebVitals.ts",[],"/app/src/App.tsx",["106"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\n\nimport { attemptGetUser } from \"./store/thunks/user\";\nimport {\n  ConfirmPage,\n  Home,\n  Profile,\n  NavBar,\n  Login,\n  LoginForgot,\n  LoginResetPassword,\n  Logout,\n  Register\n} from \"./components\";\nimport ProtectedRoute from './components/protectedRoute'\n\nexport default function App() {\n  const [loading, setLoading] = useState(true);\n  const dispatch: any = useDispatch();\n\n  useEffect(() => {\n    dispatch(attemptGetUser())\n      .then(() => setLoading(false))\n      .catch(() => setLoading(false));\n   \n  }, []);\n\n  return loading ? (\n    <p>Loading</p>\n  ) : (\n    <React.Fragment>\n      <NavBar />\n      <Switch>\n        <Route path='/home' exact component={Home} />\n        <ProtectedRoute path='/my-profile' component={Profile} />\n        <Route path='/account/confirm/:token' exact component={ConfirmPage} />\n        <Route path='/register' exact component={Register} />\n        <Route path='/login' exact component={Login} />\n        <Route path='/login/forgot' exact component={LoginForgot} />\n        <Route path='/login/reset/:token' component={LoginResetPassword} />\n        <ProtectedRoute path='/logout' component={Logout} />\n        <Redirect from='/' exact to='/home' />\n        <Redirect to='/home' />\n      </Switch>\n    </React.Fragment>\n  );\n}","/app/src/store/configureStore.ts",[],"/app/src/store/thunks/user.ts",[],"/app/src/store/reducers/index.ts",["107"],"import { combineReducers } from \"redux\";\r\nimport { connectRouter } from \"connected-react-router\";\r\nimport { History } from 'history';\r\n\r\nimport user from \"./user\";\r\nimport { AppStateType } from \"../../entities\";\r\n\r\nexport default (history: History<any>) =>\r\n  combineReducers<AppStateType>({\r\n    router: connectRouter(history),\r\n    user,\r\n  });","/app/src/components/protectedRoute.tsx",[],"/app/src/components/index.ts",[],"/app/src/store/actions/user.ts",[],"/app/src/store/reducers/user.ts",["108","109"],"import {Action, Reducer} from 'redux'\r\nimport { IUser, IUserState } from \"../../entities/user\";\r\nimport { LOGIN_USER, LOGOUT_USER, SET_USER, RESET_USER } from \"../actions/user\";\r\n\r\nconst initialState: IUserState = {\r\n  isAuth: false,\r\n  user: {} as IUser,\r\n};\r\n\r\nexport default function user(state: IUserState = initialState, action: any):IUserState {\r\n  switch (action.type) {\r\n    case LOGIN_USER:\r\n      return {\r\n        user: action.user,\r\n        isAuth: true,\r\n      };\r\n    case LOGOUT_USER:\r\n      return {\r\n        isAuth: false,\r\n        user: {} as IUser,\r\n      };\r\n    case SET_USER:\r\n      return {\r\n        user: action.user,\r\n        isAuth: true,\r\n      };\r\n    case RESET_USER:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/app/src/helpers/api/user.ts",[],"/app/src/components/NavBar.tsx",["110"],"import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../entities\";\r\n\r\ninterface INavBarProps {\r\n}\r\n\r\nconst NavBar: React.FC<INavBarProps> = ({}) => {\r\n  const { isAuth, user } = useSelector((state: AppStateType) => state.user);\r\n\r\n  return (\r\n    <nav className='nav'>\r\n      <NavLink className='inactive ' activeClassName='active' to='/home'>\r\n        Home\r\n      </NavLink>\r\n\r\n      {isAuth ? (\r\n        <div>\r\n          <NavLink className='inactive' activeClassName='active' to='/my-profile'>\r\n            {user?.username}\r\n          </NavLink>\r\n          <NavLink className='inactive logout' activeClassName='active' to='/logout'>\r\n            Logout\r\n          </NavLink>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <NavLink className='inactive' activeClassName='active' to='/login'>\r\n            Login\r\n          </NavLink>\r\n          <NavLink className='inactive ' activeClassName='active' to='/register'>\r\n            Register\r\n          </NavLink>\r\n        </div>\r\n      )}\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;","/app/src/components/Profile.tsx",["111"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../entities\";\r\n\r\ninterface IProfileProps {\r\n}\r\n\r\nconst Profile: React.FC<IProfileProps> = ({}) => {\r\n  const { username } = useSelector((state: AppStateType) => state.user.user);\r\n\r\n  return (\r\n    <div className='container'>\r\n      <p>\r\n        Hey <b>{username}</b> ! Check the github repository:\r\n      </p>\r\n      <a href='https://github.com/flaviuse/mern-authentification'>\r\n        https://github.com/flaviuse/mern-authentification\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","/app/src/components/Home.tsx",[],"/app/src/components/auth/Logout.tsx",["112"],"import React, { useEffect } from \"react\";\r\nimport { push } from \"connected-react-router\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { attemptLogout } from \"../../store/thunks/auth\";\r\n\r\ninterface ILogoutProps {\r\n}\r\n\r\nconst Logout: React.FC<ILogoutProps> = ({}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(attemptLogout());\r\n    dispatch(push(\"/home\"));\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return <p>Logout in progress</p>;\r\n}\r\n\r\nexport default Logout","/app/src/components/auth/ConfirmPage.tsx",[],"/app/src/components/auth/Login.tsx",["113"],"import React, { useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { attemptLogin } from \"../../store/thunks/auth\";\r\nimport Error from \"../Error\";\r\nimport { AppStateType } from \"../../entities\";\r\n\r\ninterface ILoginProps {\r\n}\r\ninterface IFormValues {\r\n  username: string,\r\n  password: string\r\n}\r\n\r\nconst Login: React.FC<ILoginProps> = ({}) => {\r\n  const { isAuth } = useSelector((state: AppStateType) => state.user);\r\n  const [serverError, setServerError] = useState(\"\");\r\n\r\n  const dispatch: any = useDispatch();\r\n\r\n  const initialValues: IFormValues = {\r\n    username: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    username: Yup.string().min(3).max(50).required(\"Required\"),\r\n    password: Yup.string().min(5).max(255).required(\"Required\"),\r\n  });\r\n\r\n  const onSubmit = (values: IFormValues) => {\r\n    dispatch(attemptLogin(values)).catch((error: any) => {\r\n      if(error.response) {\r\n        setServerError(error.response.data.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  return isAuth ? (\r\n    <Redirect to='/home' />\r\n  ) : (\r\n    <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n      {(formik) => {\r\n        return (\r\n          <div className='container'>\r\n            <Form className='form'>\r\n              <div className='field'>\r\n                <label htmlFor='username'>Username</label>\r\n                <Field id='username' name='username' type='text' placeholder='Username' />\r\n                <ErrorMessage name='username' component={Error} />\r\n              </div>\r\n              <div className='field'>\r\n                <label htmlFor='password'>Password</label>\r\n                <Field id='password' name='password' type='password' placeholder='Password' />\r\n                <ErrorMessage name='password' component={Error} />\r\n              </div>\r\n              <div>\r\n                <Link to='/login/forgot'>Forgot your password?</Link>\r\n              </div>\r\n              <button type='submit' disabled={!formik.dirty || !formik.isValid}>\r\n                Login\r\n              </button>\r\n              {serverError && <Error>{serverError}</Error>}\r\n            </Form>\r\n            <b>Or</b>\r\n            <Link to='/register'>Sign Up</Link>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","/app/src/components/auth/Register.tsx",["114"],"import React, { Fragment, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport Error from \"../Error\";\r\nimport {\r\n  attemptRegister,\r\n  attemptResendConfirmation,\r\n  attemptResetRegister,\r\n} from \"../../store/thunks/auth\";\r\nimport { AppStateType } from \"../../entities\";\r\n\r\ninterface IRegisterProps {\r\n}\r\ninterface IFormValues {\r\n  email: string,\r\n  username: string,\r\n  password: string\r\n}\r\n\r\nconst Register:React.FC<IRegisterProps> = ({}) => {\r\n  const { isAuth } = useSelector((state: AppStateType) => state.user);\r\n  const [serverError, setServerError] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [registerStep, setRegisterStep] = useState(\"register\"); // Use an enum with TS;\r\n\r\n  const dispatch: any = useDispatch();\r\n\r\n  const initialValues: IFormValues = {\r\n    email: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().min(5).max(255).email().required(\"Required\"),\r\n    username: Yup.string().min(3).max(50).required(\"Required\"),\r\n    password: Yup.string().min(5).max(255).required(\"Required\"),\r\n  });\r\n\r\n  const onSubmit = (values: IFormValues) => {\r\n    dispatch(attemptRegister(values))\r\n      .then(() => {\r\n        setEmail(values.email);\r\n        setRegisterStep(\"resend\");\r\n      })\r\n      .catch((error: any) => {\r\n        if (error.response) {\r\n          setServerError(error.response.data.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const onResendEmail = () => {\r\n    dispatch(attemptResendConfirmation(email))\r\n      .then(() => setRegisterStep(\"reset\"))\r\n      .catch((error: any) => {\r\n        if (error.response) {\r\n          setServerError(error.response.data.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const onReset = () => {\r\n    dispatch(attemptResetRegister(email)).catch((error: any) => {\r\n      if (error.response) {\r\n        setServerError(error.response.data.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  function renderSwitch() {\r\n    switch (registerStep) {\r\n      case \"register\":\r\n        return (\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={onSubmit}>\r\n            {(formik) => {\r\n              return (\r\n                <div className='container'>\r\n                  <Form className='form'>\r\n                    <div className='field'>\r\n                      <label htmlFor='email'>Email</label>\r\n                      <Field id='email' name='email' type='email' placeholder='Email' />\r\n                      <ErrorMessage name='email' component={Error} />\r\n                    </div>\r\n                    <div className='field'>\r\n                      <label htmlFor='username'>Username</label>\r\n                      <Field id='username' name='username' type='text' placeholder='Username' />\r\n                      <ErrorMessage name='username' component={Error} />\r\n                    </div>\r\n                    <div className='field'>\r\n                      <label htmlFor='password'>Password</label>\r\n                      <Field id='password' name='password' type='password' placeholder='Password' />\r\n                      <ErrorMessage name='password' component={Error} />\r\n                    </div>\r\n                    <button type='submit' disabled={!formik.dirty || !formik.isValid}>\r\n                      Signup\r\n                    </button>\r\n                    {serverError && <Error>{serverError}</Error>}\r\n                  </Form>\r\n                </div>\r\n              );\r\n            }}\r\n          </Formik>\r\n        );\r\n      case \"resend\":\r\n        return (\r\n          <div className='container'>\r\n            <p>A verification email has been sent.</p>\r\n            <p>Check you mailbox : {email}.</p>\r\n            <p>\r\n              You have 12 hours to activate your account. It can take up to 15 min to receive our\r\n              email.\r\n            </p>\r\n            <button onClick={onResendEmail}>\r\n              Did not receive the email? Click here to send again.\r\n            </button>\r\n            {serverError && <Error>{serverError}</Error>}\r\n          </div>\r\n        );\r\n\r\n      case \"reset\":\r\n        return (\r\n          <div className='container'>\r\n            <p>Still not received an email? </p>\r\n            <p>Try to register again. You may have given the wrong email. </p>\r\n            <p>If you want to be able to use the same username, reset the registration :</p>\r\n            <button onClick={onReset}>Click here to reset the registration</button>\r\n            {serverError && <Error>{serverError}</Error>}\r\n          </div>\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return isAuth ? <Redirect to='/home' /> : <Fragment>{renderSwitch()}</Fragment>;\r\n}\r\n\r\nexport default Register;","/app/src/components/auth/LoginResetPassword.tsx",[],"/app/src/components/auth/LoginForgot.tsx",["115"],"import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Error from \"../Error\";\r\nimport { attemptSendResetPasswordLink } from \"../../store/thunks/auth\";\r\nimport { AppStateType } from \"../../entities\";\r\n\r\ninterface ILoginForgotProps {\r\n}\r\ninterface IFormValues {\r\n  email: string\r\n}\r\n\r\nconst LoginForgot:React.FC<ILoginForgotProps> = ({}) => {\r\n  const { isAuth } = useSelector((state: AppStateType) => state.user);\r\n  const [serverError, setServerError] = useState(\"\");\r\n  const [isSubmited, setIsSubmited] = useState(false);\r\n\r\n  const dispatch: any = useDispatch();\r\n\r\n  const initialValues: IFormValues = {\r\n    email: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().min(5).max(255).email().required(\"Required\"),\r\n  });\r\n\r\n  const onSubmit = (values: IFormValues) => {\r\n    const email = values.email;\r\n    dispatch(attemptSendResetPasswordLink(email))\r\n      .then(() => setIsSubmited(true))\r\n      .catch((error: any) => {\r\n        if (error.response) {\r\n          setServerError(error.response.data.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  return isAuth ? (\r\n    <Redirect to='/home' />\r\n  ) : isSubmited ? (\r\n    <div className='container'>\r\n      <p>\r\n        A reset link has been sent to your email. <b>You have 12 hours to activate your account.</b>\r\n        It can take up to 15 min to receive our email.\r\n      </p>\r\n    </div>\r\n  ) : (\r\n    <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n      {(formik) => {\r\n        return (\r\n          <div className='container'>\r\n            <p>We will send you a reset link on the following email :</p>\r\n            <Form className='form'>\r\n              <div className='field'>\r\n                <label htmlFor='email'>Email</label>\r\n                <Field id='email' name='email' type='email' placeholder='Email' />\r\n                <ErrorMessage name='email' component={Error} />\r\n              </div>\r\n\r\n              <button type='submit' disabled={!formik.dirty || !formik.isValid}>\r\n                Send reset link\r\n              </button>\r\n              {serverError && <Error>{serverError}</Error>}\r\n            </Form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default LoginForgot;","/app/src/helpers/api/index.ts",[],"/app/src/store/thunks/auth.ts",[],"/app/src/components/Error.tsx",["116"],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":28,"column":6,"nodeType":"123","endLine":28,"endColumn":8,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":8,"column":1,"nodeType":"127","endLine":12,"endColumn":6},{"ruleId":"128","severity":1,"message":"129","line":1,"column":9,"nodeType":"130","messageId":"131","endLine":1,"endColumn":15},{"ruleId":"128","severity":1,"message":"132","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":24},{"ruleId":"133","severity":1,"message":"134","line":9,"column":41,"nodeType":"135","messageId":"136","endLine":9,"endColumn":43},{"ruleId":"133","severity":1,"message":"134","line":8,"column":43,"nodeType":"135","messageId":"136","endLine":8,"endColumn":45},{"ruleId":"133","severity":1,"message":"134","line":9,"column":41,"nodeType":"135","messageId":"136","endLine":9,"endColumn":43},{"ruleId":"133","severity":1,"message":"134","line":18,"column":39,"nodeType":"135","messageId":"136","endLine":18,"endColumn":41},{"ruleId":"133","severity":1,"message":"134","line":22,"column":44,"nodeType":"135","messageId":"136","endLine":22,"endColumn":46},{"ruleId":"133","severity":1,"message":"134","line":16,"column":50,"nodeType":"135","messageId":"136","endLine":16,"endColumn":52},{"ruleId":"128","severity":1,"message":"137","line":3,"column":11,"nodeType":"130","messageId":"131","endLine":3,"endColumn":22},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["140"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'Action' is defined but never used.","Identifier","unusedVar","'Reducer' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'IErrorProps' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},"Update the dependencies array to be: [dispatch]",{"range":"143","text":"144"},[667,669],"[dispatch]"]